--
-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--


module DA.RefApps.KnowYourCustomer.Triggers.TimeUpdater where

import Daml.Trigger
import DA.Time
import DA.Action
import DA.Foldable

import DA.TimeService.TimeService

timeUpdaterTrigger : Trigger ()
timeUpdaterTrigger = Trigger
  { initialize = pure ()
  , updateState = \_ -> pure ()
  , rule = updateTime
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @TimeConfiguration,
      registeredTemplate @CurrentTime
    ]
  , heartbeat = Some $ seconds 5
  }

updateTime : Party -> TriggerA () ()
updateTime party = do
  currentTimeContracts <- query @CurrentTime
  let ourTimeContracts = filter (\(_, timeContract) -> timeContract.operator == party) currentTimeContracts

  (isRunning, modelPeriodTime) <- getConfig party

  when isRunning $
    forA_ ourTimeContracts $ \(currentTimeCid, currentTime) ->
      dedupExercise currentTimeCid UpdateCurrentTime with
          newCurrentTime = addRelTime currentTime.currentTime modelPeriodTime

getConfig : Party -> TriggerA () (Bool, RelTime)
getConfig party = do
  maybeConfig <- queryContractKey @TimeConfiguration party
  case maybeConfig of
    Some (_, config) ->
      pure (config.isRunning, config.modelPeriodTime)
    None ->
      pure (False, seconds 1)
