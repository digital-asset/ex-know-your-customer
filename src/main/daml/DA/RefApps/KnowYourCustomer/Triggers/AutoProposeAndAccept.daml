--
-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--


module DA.RefApps.KnowYourCustomer.Triggers.AutoProposeAndAccept where

import Daml.Trigger
import DA.Foldable

import DA.RefApps.KnowYourCustomer.Roles
import DA.RefApps.KnowYourCustomer.Types

autoProposeTrigger : Trigger ()
autoProposeTrigger = Trigger
  { initialize = pure ()
  , updateState = \_ -> pure ()
  , rule = autoPropose
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @DataStreamRequest
    ]
  , heartbeat = None
  }

autoAcceptTrigger : Trigger ()
autoAcceptTrigger = Trigger
  { initialize = pure ()
  , updateState = \_ -> pure ()
  , rule = autoAccept
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @DataLicenseProposal
    ]
  , heartbeat = None
  }

autoPropose : Party -> TriggerA () ()
autoPropose party = do
  dataStreamRequests <- query @DataStreamRequest
  let ownDataStreamRequests = filter (\(_, dsr) -> dsr.publisher.party == party) dataStreamRequests

  forA_ ownDataStreamRequests $ \(dsrCid, _) ->
    dedupExercise dsrCid DataStreamRequest_Propose with price = SubscriptionFee 100.0

autoAccept : Party -> TriggerA () ()
autoAccept party = do
  dataLicenseProposals <- query @DataLicenseProposal
  let ownDataLicenseProposals = filter (\(_, dlp) -> dlp.consumer.party == party) dataLicenseProposals

  forA_ ownDataLicenseProposals $ \(dlpCid, _) ->
    dedupExercise dlpCid DataLicenseProposal_Accept
