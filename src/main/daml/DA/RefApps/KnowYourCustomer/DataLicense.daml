--
-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

module DA.RefApps.KnowYourCustomer.DataLicense where

import DA.Time
import DA.TimeService.TimeService

import DA.RefApps.KnowYourCustomer.Types

data LicenseData =
      LicenseData with
        publisher: Publisher
        consumer: Consumer
        reference: ObservationReference
        starting: Time
        ending: Time
        stale: RelTime
        price: SubscriptionFee
        operator: Party
      deriving (Eq, Show)

template DataLicense
  with
    licenseData : LicenseData
  where
    signatory licenseData.publisher.party, licenseData.consumer.party

    key (licenseData.publisher, licenseData.consumer, licenseData.reference): PublicationKey
    maintainer key._1.party

    controller licenseData.publisher.party can
      DataLicense_ClaimRegistered: ContractId RegisteredDataLicense
        do
          began <- fetchTime licenseData.operator
          create RegisteredDataLicense with ..

template RegisteredDataLicense
  with
    licenseData : LicenseData
  where
    signatory licenseData.publisher.party, licenseData.consumer.party

    key (licenseData.publisher, licenseData.consumer, licenseData.reference): PublicationKey
    maintainer key._1.party

    controller licenseData.publisher.party can
      RegisteredDataLicense_BeginStreaming: ContractId LiveStreamLicense
        do
          began <- fetchTime licenseData.operator
          create LiveStreamLicense with licenseData = licenseData, began, ..

template LiveStreamLicense
  with
    licenseData: LicenseData
    began: Time
  where
    signatory licenseData.publisher.party, licenseData.consumer.party

    ensure licenseData.ending > began

    key (licenseData.publisher, licenseData.consumer, licenseData.reference): PublicationKey
    maintainer key._1.party

    controller licenseData.publisher.party can
      ExpireLicense: ()
        do
          now <- fetchTime licenseData.operator
          let message = "Expiring license. Ending at: " <> show licenseData.ending
                     <> ", current time is: " <> show now
          assertMsg message (isLicenseExpired licenseData now)

isLicenseExpired : LicenseData -> Time -> Bool
isLicenseExpired license currentTime = license.ending <= currentTime
