--
-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module Test.DA.RefApps.KnowYourCustomer.ComplaintsTest where

import DA.Assert
import DA.TimeService.TimeService
import DA.Time as T

import DA.RefApps.KnowYourCustomer.DataStream
import DA.RefApps.KnowYourCustomer.DataLicense
import DA.RefApps.KnowYourCustomer.Types
import DA.RefApps.KnowYourCustomer.Publication

import Test.DA.RefApps.KnowYourCustomer.RolesTest

testConsumerCanClaimStalePublication : Scenario ()
testConsumerCanClaimStalePublication = scenario do
  (reference, currentObservation, operator, bankParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, analystStreamId, staleHours)
    <- roleSetup

  let
    lookupKey = (Publisher mdVendorParty, Consumer bankParty, reference)
    afterStale = addRelTime now (hours (staleHours + 1))
    someCIP = createCIP 211

  submit mdVendorParty do
    exercise analystStreamId UpdateObservation with
      time = now
      newValue = someCIP

  submit operator do
    exercise currentTimeCid UpdateCurrentTime with newCurrentTime = afterStale

  submit bankParty do
    (licenseId, license) <- fetchByKey @LiveStreamLicense lookupKey
    (publicationId, publication) <- fetchByKey @Publication lookupKey
    stalePublicationCid <- exercise licenseId ClaimStale with publicationId
    stalePublication <- fetch stalePublicationCid
    stalePublication.licenseData === license.licenseData
    stalePublication.publication === publication
    stalePublication.claimed === afterStale

testConsumerCannotClaimStalePublicationBeforeStaleTime : Scenario ()
testConsumerCannotClaimStalePublicationBeforeStaleTime = scenario do
  (reference, currentObservation, operator, bankParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, staleHours)
    <- roleSetup

  let
    lookupKey = (Publisher mdVendorParty, Consumer bankParty, reference)
    beforeStale = addRelTime now (hours (staleHours - 1))
    someCIP = createCIP 463

  submit mdVendorParty do
    exercise mdvStreamId UpdateObservation with
      time = now
      newValue = someCIP

  submit operator do
    exercise currentTimeCid UpdateCurrentTime with newCurrentTime = beforeStale

  (licenseId, publicationId) <- submit bankParty do
    (licenseId, _) <- fetchByKey @LiveStreamLicense lookupKey
    (publicationId, _) <- fetchByKey @Publication lookupKey
    pure (licenseId, publicationId)

  submitMustFail bankParty do
    exercise licenseId ClaimStale with publicationId

consumerCanStartDisputeAboutQuality : Scenario ()
consumerCanStartDisputeAboutQuality = scenario do
  (reference, currentObservation, operator, bankParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, staleHours)
    <- roleSetup

  let
    lookupKey = (Publisher mdVendorParty, Consumer bankParty, reference)
    afterStale = addRelTime now (hours (staleHours + 1))
    someCIP = createCIP 211

  submit mdVendorParty do
    exercise mdvStreamId UpdateObservation with
      time = now
      newValue = someCIP

  submit operator do
    exercise currentTimeCid UpdateCurrentTime with newCurrentTime = afterStale

  submit bankParty do
    let actualDescription = "bad quality"
    (licenseId, license) <- fetchByKey @LiveStreamLicense lookupKey
    (publicationId, publication) <- fetchByKey @Publication lookupKey
    disputedStreamQualityCid <- exercise publicationId DisputeQuality with description = actualDescription
    disputedStreamQuality <- fetch disputedStreamQualityCid
    disputedStreamQuality.publication === publication
    disputedStreamQuality.description === actualDescription
