--
-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module Test.DA.RefApps.KnowYourCustomer.Triggers.PublishResearchOnEmptyDataStreamTestSetup where

import DA.Time as T
import DA.TimeService.TimeService

import DA.RefApps.KnowYourCustomer.DataStream
import DA.RefApps.KnowYourCustomer.KycExtension
import DA.RefApps.KnowYourCustomer.MarketSetupScript
import DA.RefApps.KnowYourCustomer.Roles
import DA.RefApps.KnowYourCustomer.Types
import DA.RefApps.KnowYourCustomer.Utils
import Test.DA.RefApps.KnowYourCustomer.RolesTest
import Test.DA.RefApps.KnowYourCustomer.Triggers.MergeTest
import Test.DA.RefApps.KnowYourCustomer.Triggers.MergeAndSendToReviewTestSetup
import Test.DA.RefApps.KnowYourCustomer.Utils (createDataStream')

import Daml.Script

setup : Script ()
setup = do
  setupToMergeRawPublicationsOnEmptyDataStream
  pure ()

setupToMergeRawPublicationsOnEmptyDataStream : Script (ContractId EmptyDataStream)
setupToMergeRawPublicationsOnEmptyDataStream = do
  let
    operator = getScriptParty "Operator"
    analyst = getScriptParty "KYC_Analyst"
    reviewer = getScriptParty "KYC_Reviewer"
    qualityAssurance = getScriptParty "KYC_QA"
    bank1 = getScriptParty "Bank1"

  operator `submit`
    createCmd CurrentTime with
      operator
      currentTime = appStartTime
      observers = [analyst]

  researchProcess <- setupRawPublicationsAndResearchProcess
  createResearchResult researchProcess analyst reviewer qualityAssurance

  stream <- createEmptyDataStream operator analyst bank1
  case stream of
    EDS actualStreamId ->
      pure actualStreamId
    _ ->
      error "There should have been an empty data stream."

  where
    reference = ObservationReference with
      customerName = "ACME"
      includeCIP = True
      includeCDD = False
      includeScreening = True

    researchData = ResearchData with
      researchCip = Data $ createCIPData 1
      researchCdd = NotAvailable
      researchScreening = Data $ createScreeningData 1

    createResearchResult researchProcess analyst reviewer qualityAssurance = do
      reviewRequest <- submit analyst $ exerciseCmd researchProcess SendToReview with
          time = addRelTime appStartTime (hours 1)
          researchData = researchData
      qaRequest <- submit reviewer $ exerciseCmd reviewRequest ApproveReview
      submit qualityAssurance $ exerciseCmd qaRequest ApproveVerified

    createEmptyDataStream operator analyst bank1 = do
      operatorRole <- operator `submit` createCmd OperatorRole with operator
      relation <- createRelationship operator operatorRole analyst bank1
      let
        starting = addRelTime appStartTime (hours 1)
        ending = addRelTime appStartTime (days 1)
        staleHours = 3
      createDataStream'
        analyst bank1 relation
        reference starting ending staleHours (SubscriptionFee 10.0)
