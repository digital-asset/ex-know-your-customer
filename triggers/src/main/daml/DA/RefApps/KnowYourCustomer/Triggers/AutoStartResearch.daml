--
-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--


module DA.RefApps.KnowYourCustomer.Triggers.AutoStartResearch where

import Daml.Trigger
import DA.Foldable
import DA.Time
import DA.Action

import DA.RefApps.KnowYourCustomer.Triggers.Logging
import DA.RefApps.KnowYourCustomer.Roles
import DA.RefApps.KnowYourCustomer.DataLicense
import DA.RefApps.KnowYourCustomer.DataStream
import DA.RefApps.KnowYourCustomer.Types
import DA.RefApps.KnowYourCustomer.KycExtension

-- This trigger looks for Research Licenses (which are the results of
-- the following process: request - propose price - accept) and
--  1) starts a Research Process for each,
--  2) registers each
autoStartResearchProcessTrigger : Trigger ()
autoStartResearchProcessTrigger = Trigger
  { initialize = pure ()
  , updateState = \_ -> pure ()
  , rule = startResearchProcess
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @EmptyDataStream
    , registeredTemplate @PublisherConsumerRelationship
    , registeredTemplate @DataLicense
    , registeredTemplate @PublisherRole
    ]
  , heartbeat = None
  }

startResearchProcess : Party -> TriggerA () ()
startResearchProcess actualParty = do
  licenses <- query @DataLicense
  publisherRoles <- query @PublisherRole
  let researchLicensesToRegister = filter (\(_, l) -> l.licenseData.publisher.party == actualParty) licenses
      ownPublisherRoles = filter (\(_, r) -> r.publisher.party == actualParty) publisherRoles

  case ownPublisherRoles of
    [(ourPublisherRoleCid, ourPublisherRole)] ->
      forA_ researchLicensesToRegister $ \(lCid, l) -> do
        debug $ "Triggered by research request: " <> (show l)
        debug $ "Triggered by role: " <> (show ourPublisherRole)
        when (ourPublisherRole.operator == l.licenseData.operator) $ do
          debugLog "StartResearchProcess" actualParty $
            "Automatically registering license and starting research process: " <>
                show l.licenseData.reference
          emitCommands [exerciseCmd ourPublisherRoleCid RegisterLicense with licenseId = lCid] [toAnyContractId lCid]
          dedupCreate ResearchProcess with
            analyst = actualParty
            reference = l.licenseData.reference
            lastChecked = None
    [] ->
      pure ()
    other ->
      error $ "There are more than one publisher role contracts: " <> show other

startingDate : Time
startingDate = addRelTime appStartTime (hours 1)

endingDate : Time
endingDate = addRelTime appStartTime (days 500)
